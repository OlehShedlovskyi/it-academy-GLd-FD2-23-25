Что такое JavaScript?
Язык программирования для веба. JS создан, чтобы «оживлять» сайты. Без него страницы были бы статичными (как книги), а с ним — интерактивными (как приложения).

Работает в браузере. Когда ты открываешь сайт, браузер (Chrome, Firefox) читает JS-код и выполняет его прямо у тебя на компьютере/телефоне.

Не путай с Java! Это разные языки. JS проще и «дружелюбнее» для новичков.

Где используется JavaScript?
Фронтенд (Frontend) — «лицо» сайта:

Кнопки, формы, слайдеры (например, всплывающие окна при клике).

Динамическое обновление контента (лайки в соцсетях без перезагрузки страницы).

Анимации и эффекты (плавные переходы, параллакс).

Пример: Когда ты вводишь пароль и видишь «Слишком короткий», это JS проверяет данные в реальном времени.

Бэкенд (Backend) — «мозги» сайта:

С помощью Node.js JS работает на сервере. Можно создавать API, работать с базами данных.

Пример: Когда ты отправляешь сообщение в чате, Node.js может обработать его и сохранить в базе.

Мобильные приложения:

React Native, Ionic — фреймворки для создания iOS/Android-приложений на JS.

Десктопные приложения:

Electron (например, VS Code, Discord) — пишутся на JS.

Игры:

Простые браузерные игры (например, 2048 или Canvas-игры).

Даже в робототехнике и IoT! С помощью платформ вроде Johnny-Five.

Зачем учить JavaScript?
Универсальность: Один язык — для веба, серверов, приложений.

Популярность: №1 в мире по использованию (GitHub, Stack Overflow).

Легко начать: Достаточно браузера и блокнота. Не нужно компилировать код.

Большое комьюнити: Много уроков, библиотек (React, Vue), готовых решений.
//

Что такое переменная?
Именованное хранилище для данных.

Пример из жизни: Допустим, у тебя есть конверт с надписью «Бюджет». Ты кладешь в него 1000 рублей. Позже ты можешь взять деньги из конверта, добавить их или изменить.

В коде: let budget = 1000; → Переменная budget хранит число 1000.

Где используются переменные?
Хранение данных:
Например, результат математической операции, введенный пользователем текст, состояние кнопки (включена/выключена).

Переиспользование значений:
Если число или строка повторяются много раз в коде, проще создать переменную.

javascript
Copy
const taxRate = 0.13; // Налог 13%
let salary = 50000;
let tax = salary * taxRate; // 6500
Взаимодействие с пользователем:
Данные из форм, клики, ввод с клавиатуры — всё это сохраняется в переменные.

javascript
Copy
// Получить текст из поля ввода
const inputText = document.querySelector("#myInput").value;
Управление логикой программы:
Переменные помогают принимать решения (например, проверять пароль).

javascript
Copy
const correctPassword = "qwerty123";
const userPassword = prompt("Введите пароль");

if (userPassword === correctPassword) {
  alert("Добро пожаловать!");
} else {
  alert("Неверный пароль!");
}
//

Что такое switch?
Это как «умный выбор» для компьютера. Представь, что ты стоишь перед автоматом с напитками:

Нажал кнопку «1» — выпадает вода.

Нажал «2» — выпадает сок.

Нажал «3» — выпадает чай.

Нажал другую кнопку — автомат говорит: «Такого напитка нет».

switch в JavaScript работает так же: он выбирает действие в зависимости от значения переменной.

Где switch используется:

Меню в играх: Выбор уровня сложности («легкий», «средний», «сложный»).

Обработка действий: Например, если пользователь нажал «Сохранить», «Удалить», «Отмена».

Календари: Определение названия месяца по его номеру (1 → «Январь», 2 → «Февраль»).
//

Что такое объект?
Представь, что объект — это коробка с наклейками. На каждой наклейке написано название (например, "имя", "возраст", "цвет"), а внутри коробки лежат значения (например, "Аня", 25, "синий").
Объект позволяет хранить связанные данные в одном месте, чтобы их было удобно использовать.

Где используются объекты:

1. Хранение данных о пользователях:
Например, информация о тебе в социальной сети:

javascript
Copy
let пользователь = {
  имя: "Иван",
  возраст: 20,
  город: "Москва"
};
2. Работа с элементами на странице:
Например, описание кнопки:

javascript
Copy
let кнопка = {
  текст: "Нажми меня",
  цвет: "синий",
  активна: true
};
3. Описание сложных сущностей:
Например, информация о товаре в интернет-магазине:

javascript
Copy
let товар = {
  название: "Ноутбук",
  цена: 50000,
  вНаличии: true
};
//

Что такое массив?
Представь, что массив — это полка с ящиками. В каждом ящике лежит что-то важное: игрушка, книга, фрукт.
Массив позволяет хранить список данных в одном месте, чтобы их было удобно использовать.

Где используются массивы:

1. Списки данных:
Например, список покупок:

javascript
Copy
let покупки = ["хлеб", "молоко", "яйца"];

2. Работа с пользователями:
Например, список имен пользователей:

javascript
Copy
let пользователи = ["Аня", "Иван", "Мария"];

3. Хранение чисел:
Например, оценки студента:

javascript
Copy
let оценки = [5, 4, 3, 5];

4. Обработка данных:
Например, фильтрация списка:

javascript
Copy
let числа = [1, 2, 3, 4, 5];
let четные = числа.filter(num => num % 2 === 0);
console.log(четные); // Выведет: [2, 4]

//

Как работает рекурсия?
Базовый случай — это условие, при котором функция перестаёт вызывать саму себя. Без него рекурсия будет продолжаться бесконечно, и программа сломается.

Рекурсивный шаг — это когда функция вызывает саму себя, но с более простой задачей.

Где используется рекурсия?
Математические задачи: Например, вычисление факториала, чисел Фибоначчи.

Работа с деревьями и графами: Например, поиск файлов в папках.

Алгоритмы сортировки: Например, быстрая сортировка (QuickSort).

Игры: Например, генерация лабиринтов или решение головоломок.

//

Разница между Rest и Spread
Rest собирает много → в одно (как мешок).

Spread раскрывает одно → в много (как взрыв конфетти).

1. Rest параметры (...) — «Собери оставшиеся конфеты в мешочек»
Используется, когда нужно собрать несколько значений в массив.

2. Оператор Spread (...) — «Рассыпь конфеты из коробки»
Используется, чтобы «разбить» массив или объект на отдельные элементы.

Где это используется?
Rest:

Когда нужно собрать оставшиеся аргументы функции в массив.

Пример: функция, которая принимает первое число, а остальные суммирует.

Spread:

Когда нужно объединить массивы или объекты.

Пример: копирование массива или объекта без изменения оригинала.

//

Чем while и for похожи и чем отличаются?
while — подходит, когда не знаешь заранее, сколько раз повторить.
Пример: «Пока не закончится вода в стакане, пей глоток».

for — когда точно знаешь количество повторов.
Пример: «Пройди 10 кругов вокруг дома».

Где это используется?
Обработка данных: Например, перебор элементов массива.

Игры: Например, движение персонажа до конца уровня.

Анимации: Например, плавное изменение цвета.

//обьекты

Где это используется?
Хранение данных: Например, информация о пользователе (имя, возраст, email).

Работа с элементами на странице: Например, описание кнопки (текст, цвет, размер).

Игры: Например, описание персонажа (имя, здоровье, оружие).

// Конструктор — это «формочка» для объектов

Где это используется?
Создание множества похожих объектов: Например, пользователи, товары, персонажи в игре.

Упрощение кода: Вместо того чтобы каждый раз создавать объекты вручную, можно использовать конструктор.

//call и apply — «Одолжи инструмент для другой игрушки»

Запомни:

call/apply — как одолжить кисточку, чтобы покрасить чужую игрушку.

Декораторы — как чехлы для функций: добавляют новые фишки, не ломая старые.
Чем больше практикуешься, тем лучше поймешь, как их использовать! 😊

//Прототип и наследование
Цепочка прототипов
Конструкторы и prototype

Где это используется?
Создание множества похожих объектов: Например, пользователи, товары, персонажи в игре.

Упрощение кода: Вместо того чтобы каждый раз создавать объекты вручную, можно использовать прототипы.