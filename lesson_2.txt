На уроке преподаватель Олег Сергейчик проводил занятие по JavaScript, уделяя внимание базовым концепциям языка, таким как переменные, функции, объекты, массивы и методы работы с ними. Вот основные моменты урока:

1. Организационные моменты и технические проблемы
В начале урока были технические проблемы с микрофоном и звуком, которые преподаватель и участники пытались решить.

Обсуждение скачивания и настройки IDE (WebStorm) для работы с кодом.

2. Повторение пройденного материала
Преподаватель напомнил о пройденных темах: переменные, функции, примитивные типы данных (строки, числа, булевы значения), объекты и массивы.

Было упомянуто, что массивы и объекты не были подробно разобраны на предыдущих занятиях.

3. Работа с объектами
Преподаватель объяснил, что объекты — это "коробочки", которые могут содержать другие "коробочки" с данными (ключи и значения).

Пример работы с объектами:

javascript
Copy
const obj = { a: 1, b: 2 };
console.log(obj.a); // 1
Было показано, как добавлять и изменять свойства объектов.

4. Работа с массивами
Массивы — это упорядоченные списки данных, доступ к которым осуществляется по индексу.

Пример работы с массивами:

javascript
Copy
const arr = [1, 2, 3, 4, 5];
console.log(arr[0]); // 1
Преподаватель объяснил, как добавлять и удалять элементы из массива с помощью методов push, pop, shift, unshift.

5. Методы массивов
Были рассмотрены методы массивов, такие как push, pop, shift, unshift, splice, slice, map, find, findIndex.

Пример использования метода map:

javascript
Copy
const newArr = arr.map(item => item * 2);
console.log(newArr); // [2, 4, 6, 8, 10]
6. Ссылочные и примитивные типы данных
Преподаватель объяснил разницу между примитивными и ссылочными типами данных:

Примитивные типы (числа, строки, булевы значения) копируются по значению.

Ссылочные типы (объекты, массивы) копируются по ссылке, то есть изменение одного объекта влияет на все ссылки на него.

Пример:

javascript
Copy
const a = [1, 2, 3];
const b = a;
b.push(4);
console.log(a); // [1, 2, 3, 4]
7. Функции и стрелочные функции
Преподаватель объяснил, как создавать функции и как использовать стрелочные функции для сокращения синтаксиса.

Пример функции:

javascript
Copy
function sum(a, b) {
    return a + b;
}
Пример стрелочной функции:

javascript
Copy
const sum = (a, b) => a + b;
8. Условные конструкции (if, else, switch)
Были рассмотрены условные конструкции if, else, else if и switch.

Пример использования if:

javascript
Copy
if (a > b) {
    console.log("a больше b");
} else {
    console.log("b больше a");
}
Пример использования switch:

javascript
Copy
switch (day) {
    case 1:
        console.log("Понедельник");
        break;
    case 2:
        console.log("Вторник");
        break;
    default:
        console.log("Неизвестный день");
}
9. Тернарный оператор
Преподаватель объяснил, как использовать тернарный оператор для сокращения кода.

Пример:

javascript
Copy
const result = a > b ? "a больше b" : "b больше a";
10. Практическое задание
Участникам было предложено написать функцию, которая принимает число и возвращает название дня недели на русском языке.

Пример решения:

javascript
Copy
function getDayName(dayNumber) {
    switch (dayNumber) {
        case 1:
            return "Понедельник";
        case 2:
            return "Вторник";
        // и так далее до 7
        default:
            return "Неизвестный день";
    }
}
11. Домашнее задание
Преподаватель предложил участникам почитать документацию по циклам в JavaScript, чтобы подготовиться к следующему уроку.

12. Заключение
Преподаватель подчеркнул, что программирование — это обработка информации, и на следующем уроке будут рассмотрены циклы для циклической обработки данных.

Основные команды и примеры:
Работа с объектами:

javascript
Copy
const obj = { a: 1, b: 2 };
console.log(obj.a); // 1
Работа с массивами:

javascript
Copy
const arr = [1, 2, 3, 4, 5];
console.log(arr[0]); // 1
Методы массивов:

javascript
Copy
const newArr = arr.map(item => item * 2);
console.log(newArr); // [2, 4, 6, 8, 10]
Функции:

javascript
Copy
function sum(a, b) {
    return a + b;
}
Стрелочные функции:

javascript
Copy
const sum = (a, b) => a + b;
Условные конструкции:

javascript
Copy
if (a > b) {
    console.log("a больше b");
} else {
    console.log("b больше a");
}
Тернарный оператор:

javascript
Copy
const result = a > b ? "a больше b" : "b больше a";
Преподаватель старался донести, что понимание базовых концепций JavaScript важно для дальнейшего изучения фреймворков и библиотек, таких как React, которые используются в реальной разработке.